package bbs;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

//db에 접근해서 처리하기 위한 클래스
public class BbsDAO {
	//데이터베이스에 접근하게 해주는 객체
	private Connection connection;
	//private PreparedStatement preparedStatement; //db에 접근하는 메소드가 많기 때문에 충돌일어날 수 있으므로 주석처리
	private ResultSet resultSet;//정보를 담을 수 있는 객체
	//생성자
	public BbsDAO() {
		try {
			String dbURL = "jdbc:mysql://localhost:3306/BBS?serverTimezone=UTC";//로컬컴퓨터의 mysql서버 포트의 BBS데이터베이스에 접근할 수 있도록 함
			String dbID = "root";
			String dbPassword = "soo930";
			Class.forName("com.mysql.cj.jdbc.Driver"); //mysql에 접근할 수 있도록 해주는 드라이버 라이브러리
			connection = DriverManager.getConnection(dbURL, dbID, dbPassword); //접속
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	//글을 작성할 때 서버의 시간을 자동으로 넣어주기 위한 메소드
	public String getDate() {
		String SQL = "SELECT NOW()";
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(SQL);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				return resultSet.getString(1);
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		return ""; //데이터베이스 오류
	}
	
	//다음 게시글 번호 가져오기
	public int getNext() {
		String SQL = "SELECT bbsID FROM BBS ORDER BY bbsID DESC";//마지막 게시글의 번호를 가져온다.
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(SQL);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				return resultSet.getInt(1)+1;
			}
			return 1; //게시글이 한 개도 없는 경우
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		return -1;//데이터베이스 오류가 발생한 경우
	}
	
	//db게시글을 리스트로 가져와서 반환하는 메소드
	public ArrayList<Bbs> getList(int pageNumber){
		String SQL = "SELECT * FROM BBS WHERE bbsID < ? AND bbsAvailable = 1 ORDER BY bbsID DESC LIMIT 10"; //db에서 10개만 가져온다.
		ArrayList<Bbs> list = new ArrayList<>();
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(SQL);
			preparedStatement.setInt(1, getNext()-(pageNumber-1)*10);
			resultSet = preparedStatement.executeQuery();
			while(resultSet.next()) {
				Bbs bbs = new Bbs();
				
				//sql결과로 받은 게시글 하나에 대한 처리
				bbs.setBbsID(resultSet.getInt(1));
				bbs.setBbsTitle(resultSet.getString(2));
				bbs.setUserID(resultSet.getString(3));
				bbs.setBbsDate(resultSet.getString(4));
				bbs.setBbsContent(resultSet.getString(5));
				bbs.setBbsAvailable(resultSet.getInt(6));
				
				list.add(bbs);
			}
			return list;
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		return null;//db오류
	}
	
	//파마리터의 페이지번호가 있는지 없는지를 알려주는 메소드
	public boolean nextPage(int pageNumber) {
		String SQL = "SELECT * FROM BBS WHERE bbsID < ? AND bbsAvailable = 1 ORDER BY bbsID DESC LIMIT 10"; //db에서 10개만 가져온다.
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(SQL);
			preparedStatement.setInt(1, getNext() - (pageNumber - 1) * 10);
			resultSet = preparedStatement.executeQuery();
			while (resultSet.next()) {
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return false;
	}
	
	
	//작성한 글을 db에 저장하는 메소드
	public int write(String bbsTitle, String userID, String bbsContent) {
		String SQL = "INSERT INTO BBS VALUES (?,?,?,?,?,?)";
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(SQL);
			preparedStatement.setInt(1, getNext()); //게시글의 번호 set
			preparedStatement.setString(2, bbsTitle);
			preparedStatement.setString(3, userID);
			preparedStatement.setString(4, getDate());
			preparedStatement.setString(5, bbsContent);
			preparedStatement.setInt(6, 1); // Available값 set
		
			return preparedStatement.executeUpdate(); //성공했다면 0이상의 결과 반환
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		return -1;//db오류
	}
	
	//게시글의 제목을 클릭했을 때 해당 게시글을  보여주기 위한 메소드
	public Bbs getBbs(int bbsID) {
		String SQL = "SELECT * FROM BBS WHERE bbsID = ?";
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(SQL);
			preparedStatement.setInt(1, bbsID); //해당 게시글id를 가져온다.
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next()) {
				Bbs bbs = new Bbs();
				
				//sql결과로 받은 게시글 하나에 대한 처리
				bbs.setBbsID(resultSet.getInt(1));
				bbs.setBbsTitle(resultSet.getString(2));
				bbs.setUserID(resultSet.getString(3));
				bbs.setBbsDate(resultSet.getString(4));
				bbs.setBbsContent(resultSet.getString(5));
				bbs.setBbsAvailable(resultSet.getInt(6));
				
				return bbs;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return null; //해당 게시글이 존재하지 않을 경우
	}
	
	//글 수정을 위한 메소드
	public int update(int bbsID, String bbsTitle, String bbsContent) {
		String SQL = "UPDATE BBS SET bbsTitle = ?, bbsContent = ? WHERE bbsID = ?";
		try {
			PreparedStatement preparedStatement = connection.prepareStatement(SQL);
			preparedStatement.setString(1, bbsTitle);
			preparedStatement.setString(2, bbsContent);
			preparedStatement.setInt(3, bbsID);
		
			return preparedStatement.executeUpdate(); //성공했다면 0이상의 결과 반환
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		return -1;//db오류
	}
	
}
